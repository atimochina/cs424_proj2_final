names(df)[13] <- "34kt Wind Radii in SE Qaudrant"
names(df)[14] <- "34kt Wind Radii in SW Qaudrant"
names(df)[15] <- "34kt Wind Radii in NW Qaudrant"
names(df)[16] <- "50kt Wind Radii in NE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SE Qaudrant"
names(df)[18] <- "50kt Wind Radii in SW Qaudrant"
names(df)[19] <- "50kt Wind Radii in NW Qaudrant"
names(df)[20] <- "64kt Wind Radii in NE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SE Qaudrant"
names(df)[22] <- "64kt Wind Radii in SW Qaudrant"
names(df)[23] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
df$Date <- as.Date(as.character(df$Date), "%Y %m %d") # makes date in to 1851-06-25
df$Date <- format(as.Date(df$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
df$Basin <- as.character(substr(df$`Basin/ATCF/Year`, 1, 2))
df$ATCF <- as.numeric(substr(df$`Basin/ATCF/Year`, 3, 4))
df$Year <- as.numeric(substr(df$`Basin/ATCF/Year`, 5, 8))
df$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
df$Time <- str_pad(df$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
df$Hour <- as.numeric(substr(df$Time, 1, 2)) # hour
df$Minute <- as.numeric(substr(df$Time, 3, 4)) # minute
df$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
df$Latitude <- as.numeric(substr(df$`Latitude/Hemisphere`, 1, 5)) # decimal
df$HemiNS <- as.character(substr(df$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
df$Longitude <- as.numeric(substr(df$`Longitude/Hemisphere`, 1, 6)) # decimal
df$HemiEW <- as.character(substr(df$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
df$`Latitude/Hemisphere` <- NULL
df$`Longitude/Hemisphere` <- NULL
for (i in 1:length(df$HemiEW)) {
if(df$HemiEW[i] == "W")
df$Longitude[i] = df$Longitude[i]*-1
if(df$HemiNS[i] == "S")
df$Latitude[i] = df$Latitude[i]*-1
}
# ============= unique dates =============
dates <- data.frame(str_split_fixed(df$Date, " ", 3))
df$Month <- as.character(dates$X1)
df$Day <- as.numeric(dates$X2)
dates <- NULL
# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
#======== Naming Unnames Hurricanes ======
#got through the entire list of hurricanes
df$`Number of Entries` <- as.numeric(as.character(df$`Number of Entries`))
count = 1
finish = df$`Number of Entries`[1]
for(i in 1:length(df$`Number of Entries`)){
if(i <= finish){
if(df$Name[i] == 'UNNAMED'){
df$NewName[i] <- paste('HURRICANE ',count)
}
else{
df$NewName[i] <- df$Name[i]
}
}
if(i == finish){
if(df$NewName[i-1] == paste('HURRICANE ', count)){
count = count + 1
}
finish = finish + df$`Number of Entries`[i+1]
}
}
df$Name <- df$NewName
df$NewName <- NULL
#==== Categorizing hurricanes based on max wind speed ======
df$'Hurricane Category' <- cut(df$`Max Wind`, c(0,74,96,111,130,157), include.lowest = T)
levels(df$'Hurricane Category') = c(NA,1, 2, 3, 4, 5)
dfAtlantic <- df
# list of months, days, and years -- using unique
listYearAtlantic <- as.numeric(unique(df$Year))
listMonthAtlantic <- as.character(unique(df$Month))
listDayAtlantic <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNameAtlantic <- as.character(unique(df$Name))
save(dfAtlantic, listYearAtlantic, listNameAtlantic,
listMonthAtlantic, listDayAtlantic, file = "atlantic_new.RData")
View(df)
df$`Hurricane Category` <- as.numeric(df$`Hurricane Category`)
df$`Hurricane Category` <- as.numeric(df$`Hurricane Category`)
View(df)
#new processing of atlantic data
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(dplyr)
# ============= ATLANTIC DATA =============
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"),row.names = NULL)
df$X23 <- NULL
names(df)[1] <- "Number of Entries"
names(df)[2] <- "Name"
names(df)[3] <- "Basin/ATCF/Year"
names(df)[4] <- "Date"
names(df)[5] <- "Time"
names(df)[6] <- "Record Identifier"
names(df)[7] <- "Status of System"
names(df)[8] <- "Latitude/Hemisphere"
names(df)[9] <- "Longitude/Hemisphere"
names(df)[10] <- "Max Wind" #in knots
names(df)[11] <- "Min Pressure" #in millibars
names(df)[12] <- "34kt Wind Radii in NE Qaudrant"
names(df)[13] <- "34kt Wind Radii in SE Qaudrant"
names(df)[14] <- "34kt Wind Radii in SW Qaudrant"
names(df)[15] <- "34kt Wind Radii in NW Qaudrant"
names(df)[16] <- "50kt Wind Radii in NE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SE Qaudrant"
names(df)[18] <- "50kt Wind Radii in SW Qaudrant"
names(df)[19] <- "50kt Wind Radii in NW Qaudrant"
names(df)[20] <- "64kt Wind Radii in NE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SE Qaudrant"
names(df)[22] <- "64kt Wind Radii in SW Qaudrant"
names(df)[23] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
df$Date <- as.Date(as.character(df$Date), "%Y %m %d") # makes date in to 1851-06-25
df$Date <- format(as.Date(df$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
df$Basin <- as.character(substr(df$`Basin/ATCF/Year`, 1, 2))
df$ATCF <- as.numeric(substr(df$`Basin/ATCF/Year`, 3, 4))
df$Year <- as.numeric(substr(df$`Basin/ATCF/Year`, 5, 8))
df$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
df$Time <- str_pad(df$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
df$Hour <- as.numeric(substr(df$Time, 1, 2)) # hour
df$Minute <- as.numeric(substr(df$Time, 3, 4)) # minute
df$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
df$Latitude <- as.numeric(substr(df$`Latitude/Hemisphere`, 1, 5)) # decimal
df$HemiNS <- as.character(substr(df$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
df$Longitude <- as.numeric(substr(df$`Longitude/Hemisphere`, 1, 6)) # decimal
df$HemiEW <- as.character(substr(df$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
df$`Latitude/Hemisphere` <- NULL
df$`Longitude/Hemisphere` <- NULL
for (i in 1:length(df$HemiEW)) {
if(df$HemiEW[i] == "W")
df$Longitude[i] = df$Longitude[i]*-1
if(df$HemiNS[i] == "S")
df$Latitude[i] = df$Latitude[i]*-1
}
# ============= unique dates =============
dates <- data.frame(str_split_fixed(df$Date, " ", 3))
df$Month <- as.character(dates$X1)
df$Day <- as.numeric(dates$X2)
dates <- NULL
# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
#======== Naming Unnames Hurricanes ======
#got through the entire list of hurricanes
df$`Number of Entries` <- as.numeric(as.character(df$`Number of Entries`))
count = 1
finish = df$`Number of Entries`[1]
for(i in 1:length(df$`Number of Entries`)){
if(i <= finish){
if(df$Name[i] == 'UNNAMED'){
df$NewName[i] <- paste('HURRICANE ',count)
}
else{
df$NewName[i] <- df$Name[i]
}
}
if(i == finish){
if(df$NewName[i-1] == paste('HURRICANE ', count)){
count = count + 1
}
finish = finish + df$`Number of Entries`[i+1]
}
}
df$Name <- df$NewName
df$NewName <- NULL
#==== Categorizing hurricanes based on max wind speed ======
df$'Hurricane Category' <- cut(df$`Max Wind`, c(0,74,96,111,130,157), include.lowest = T)
levels(df$'Hurricane Category') = c(NA,1, 2, 3, 4, 5)
df$`Hurricane Category` <- as.numeric(df$`Hurricane Category`)
dfAtlantic <- df
# list of months, days, and years -- using unique
listYearAtlantic <- as.numeric(unique(df$Year))
listMonthAtlantic <- as.character(unique(df$Month))
listDayAtlantic <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNameAtlantic <- as.character(unique(df$Name))
save(dfAtlantic, listYearAtlantic, listNameAtlantic,
listMonthAtlantic, listDayAtlantic, file = "atlantic_new.RData")
#new processing of atlantic data
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(dplyr)
# ============= ATLANTIC DATA =============
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"),row.names = NULL)
df$X23 <- NULL
names(df)[1] <- "Number of Entries"
names(df)[2] <- "Name"
names(df)[3] <- "Basin/ATCF/Year"
names(df)[4] <- "Date"
names(df)[5] <- "Time"
names(df)[6] <- "Record Identifier"
names(df)[7] <- "Status of System"
names(df)[8] <- "Latitude/Hemisphere"
names(df)[9] <- "Longitude/Hemisphere"
names(df)[10] <- "Max Wind" #in knots
names(df)[11] <- "Min Pressure" #in millibars
names(df)[12] <- "34kt Wind Radii in NE Qaudrant"
names(df)[13] <- "34kt Wind Radii in SE Qaudrant"
names(df)[14] <- "34kt Wind Radii in SW Qaudrant"
names(df)[15] <- "34kt Wind Radii in NW Qaudrant"
names(df)[16] <- "50kt Wind Radii in NE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SE Qaudrant"
names(df)[18] <- "50kt Wind Radii in SW Qaudrant"
names(df)[19] <- "50kt Wind Radii in NW Qaudrant"
names(df)[20] <- "64kt Wind Radii in NE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SE Qaudrant"
names(df)[22] <- "64kt Wind Radii in SW Qaudrant"
names(df)[23] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
df$Date <- as.Date(as.character(df$Date), "%Y %m %d") # makes date in to 1851-06-25
df$Date <- format(as.Date(df$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
df$Basin <- as.character(substr(df$`Basin/ATCF/Year`, 1, 2))
df$ATCF <- as.numeric(substr(df$`Basin/ATCF/Year`, 3, 4))
df$Year <- as.numeric(substr(df$`Basin/ATCF/Year`, 5, 8))
df$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
df$Time <- str_pad(df$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
df$Hour <- as.numeric(substr(df$Time, 1, 2)) # hour
df$Minute <- as.numeric(substr(df$Time, 3, 4)) # minute
df$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
df$Latitude <- as.numeric(substr(df$`Latitude/Hemisphere`, 1, 5)) # decimal
df$HemiNS <- as.character(substr(df$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
df$Longitude <- as.numeric(substr(df$`Longitude/Hemisphere`, 1, 6)) # decimal
df$HemiEW <- as.character(substr(df$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
df$`Latitude/Hemisphere` <- NULL
df$`Longitude/Hemisphere` <- NULL
for (i in 1:length(df$HemiEW)) {
if(df$HemiEW[i] == "W")
df$Longitude[i] = df$Longitude[i]*-1
if(df$HemiNS[i] == "S")
df$Latitude[i] = df$Latitude[i]*-1
}
# ============= unique dates =============
dates <- data.frame(str_split_fixed(df$Date, " ", 3))
df$Month <- as.character(dates$X1)
df$Day <- as.numeric(dates$X2)
dates <- NULL
# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
#======== Naming Unnames Hurricanes ======
#got through the entire list of hurricanes
df$`Number of Entries` <- as.numeric(as.character(df$`Number of Entries`))
count = 1
finish = df$`Number of Entries`[1]
for(i in 1:length(df$`Number of Entries`)){
if(i <= finish){
if(df$Name[i] == 'UNNAMED'){
df$NewName[i] <- paste('HURRICANE ',count)
}
else{
df$NewName[i] <- df$Name[i]
}
}
if(i == finish){
if(df$NewName[i] == paste('HURRICANE ', count)){
count = count + 1
}
finish = finish + df$`Number of Entries`[i+1]
}
}
df$Name <- df$NewName
df$NewName <- NULL
#==== Categorizing hurricanes based on max wind speed ======
df$'Hurricane Category' <- cut(df$`Max Wind`, c(0,74,96,111,130,157), include.lowest = T)
levels(df$'Hurricane Category') = c(NA,1, 2, 3, 4, 5)
df$`Hurricane Category` <- as.numeric(df$`Hurricane Category`)
dfAtlantic <- df
# list of months, days, and years -- using unique
listYearAtlantic <- as.numeric(unique(df$Year))
listMonthAtlantic <- as.character(unique(df$Month))
listDayAtlantic <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNameAtlantic <- as.character(unique(df$Name))
save(dfAtlantic, listYearAtlantic, listNameAtlantic,
listMonthAtlantic, listDayAtlantic, file = "atlantic_new.RData")
View(df)
load("~/CS424/Project2Final/cs424_proj2_final/atlantic_new.RData")
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(shiny)
library(shinydashboard)
library(dplyr)
load("pacific.RData")
load("atlantic.RData")
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Project 2 - Against the Wind", titleWidth = 265),
sidebar <- dashboardSidebar(
width = 265,
sidebarMenu(
menuItem("Atlantic Hurricanes", tabName = "atlantic", icon = icon("tint")),
menuItem("Pacific Hurricanes", tabName = "pacific", icon = icon("tint")),
menuItem("About", tabName = "about", icon = icon("info")),
# drop down boxes - Year, Name, Date (Month and Day)
selectInput("Name", "Select Name", c("Summary", listNameAtlantic, listNamePacific), selected = "Summary"),
selectInput("Month", "Select Month", c("Summary", listMonthAtlantic, listMonthPacific), selected = "Summary"),
selectInput("Day", "Select Day", c("Summary", listDayAtlantic, listDayPacific), selected = "Summary"),
selectInput("Year", "Select Year", c("Summary", listYearAtlantic, listYearPacific), selected = "Summary")
)
), # end sidebar
body <- dashboardBody(
tabItems(
tabItem(
tabName = "atlantic",
h2("Overview of Atlantic Hurricanes Since 2005"),
fluidRow(
box(title="By Year", plotOutput("atlanticplot1",), width = 4),
box(title="By Classification", plotOutput("atlanticplot2",), width = 4),
box(title="By Hurricane Category", plotOutput("atlanticplot3",), width = 4)
),
h2("Chart of Atlantic Hurricanes"),
fluidRow(
box(tableOutput("tableAtlantic"), width = 12, height = 500),
box(dateRangeInput("date",strong("Date range"), start = "2005-01-01", end = "2018-12-31", min = "2005-01-01", max = "2018-12-31"))
),
h2("Map of Atlantic Hurricanes in 2018"),
fluidRow(
box(leafletOutput("map1",), width = 12, height = 500)
)
),
tabItem(tabName = "pacific",
h2("Overview of Pacific Hurricanes Since 2005"),
fluidRow(
box(title="By Year", plotOutput("pacificplot1",), width = 4),
box(title="By Classification", plotOutput("pacificplot2",), width = 4),
box(title="By Hurricane Category", plotOutput("pacificplot3",), width = 4)
),
h2("Chart of Pacific Hurricanes"),
fluidRow(
box(tableOutput("tablePacific"), width = 12, height = 500)
),
h2("Map of Pacific Hurricanes in 2018"),
fluidRow(
box(leafletOutput("map2",), width = 12, height = 500)
)
),
tabItem(
tabName = "about",
h2("Project Details"),
h3("Dashboard by Angela Timochina, Amy Ngo, and Desiree Murray for CS 424 at UIC"),
h3("Data from the Atlantic hurricane database (HURDAT2) 1851-2018 and the Northeast and North Central Pacific hurricane database (HURDAT2) 1949-2018  at http://www.nhc.noaa.gov/data/#hurdat"),
h3("Created using RStudio and Shiny with shinydashboard, ggplot2, lubridate, stringr, dplyr and leaflet libraries")
)
)
) # end dashboardBody
) # end dashboardPage
server <- function(input, output) {
# ====== Reactive function ====== Needs to be fixed! This is currently using Atlantic df
reactiveFunc <- reactive({
# all summary
if(input$Name == "Summary" & input$Month == "Summary" & input$Day == "Summary" & input$Year == "Summary")
return (df)
# specific Year
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day == "Summary" & input&Year != "Summary")
return (df[df$Year == input$Year,])
# specific Month
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day == "Summary" & input&Year == "Summary")
return (df[df$Month == input$Month,])
# specific Day
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day != "Summary" & input&Year == "Summary")
return (df[df$Day == input$Day,])
# specific Year and Day
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day != "Summary" & input$Year != "Summary")
return (df[df$Year == input$Year,]) & (df[df$Day == input$Day])
# specific Year and Month
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day == "Summary" & input$Year != "Summary")
return (df[df$Year == input$Year,]) & (df[df$Month == input$Month])
# specific Month and Day
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day != "Summary" & input$Year == "Summary")
return (df[df$Month == input$Month,]) & (df[df$Day == input$Day])
# specific Month, Day and Year
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day != "Summary" & input$Year != "Summary")
return (df[df$Month == input$Month,]) & (df[df$Day == input$Day]) & (df[df$Year == input$Year])
# specific name, month, day and year
else
return (df[df$Name == input$Name]) & (df[df$Month == input$Month,]) & (df[df$Day == input$Day]) & (df[df$Year == input$Year])
})
# ==================================================================
# ====== outputs for ATLANTIC OVERVIEW ======
#By Year
output$atlanticplot1 <- renderPlot({
ggplot(df3, aes(x=Year)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Year")
})
#By Classification
output$atlanticplot2 <- renderPlot({
ggplot(df3, aes(x=df3$`Status of System`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Classification")
})
#By Hurricane Category
output$atlanticplot3 <- renderPlot({
ggplot(df4, aes(x=df4$`Hurricane Category`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Category")
})
# ========== Reactive Chart ==========
#output$tableAtlantic <- renderTable(reactiveFunc())
# ==================================================================
# ====== outputs for PACIFIC OVERVIEW ======
#By Year
output$pacificplot1 <- renderPlot({
ggplot(dfPacific3, aes(x=Year)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Year")
})
#By Classification
output$pacificplot2 <- renderPlot({
ggplot(dfPacific3, aes(x=dfPacific3$`Status of System`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Classification")
})
#By Hurricane Category
output$pacificplot3 <- renderPlot({
ggplot(dfPacific4, aes(x=dfPacific4$`Hurricane Category`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Category")
})
# ====== Reactive Tables ====== Needs to be fixed!
#output$tableAtlantic <- renderTable({
#
#})
#output$tablePacific <- renderTable({
#
#})
# ====== MAP ====== Needs reactive for maps
# Atlantic
output$map1 <- renderLeaflet({
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = df5, lng = ~Longitude, lat = ~Latitude)
})
# Pacific
output$map2 <- renderLeaflet({
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = dfPacific5, lng = ~Longitude, lat = ~Latitude)
})
}
shinyApp(ui = ui, server = server)
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(shiny)
library(shinydashboard)
library(dplyr)
#loading data from preprocessed file that was run to save data in RData format
load("atlantic_new.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("gcookbook", "hrbrthemes", "tidyverse"))
shiny::runApp()
shiny::runApp()
