# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
#======== Naming Unnames Hurricanes ======
#got through the entire list of hurricanes
df$`Number of Entries` <- as.numeric(as.character(df$`Number of Entries`))
count = 1
finish = df$`Number of Entries`[1]
for(i in 1:length(df$`Number of Entries`)){
if(i <= finish){
if(df$Name[i] == 'UNNAMED'){
df$NewName[i] <- paste('HU Pacific ',count)
}
else{
df$NewName[i] <- df$Name[i]
}
}
if(i == finish){
if(df$NewName[i] == paste('HU Pacific ', count)){
count = count + 1
}
finish = finish + df$`Number of Entries`[i+1]
}
}
df$Name <- df$NewName
df$NewName <- NULL
#==== Categorizing hurricanes based on max wind speed ======
df$'Hurricane Category' <- cut(df$`Max Wind`, c(-99,0,38,74,96,111,130,157,400), include.lowest = T)
levels(df$'Hurricane Category') = c("UNKNOWN","TD", "TS", "C1", "C2", "C3", "C4", "C5")
df$`Hurricane Category` <- as.character(df$`Hurricane Category`)
# list of months, days, and years -- using unique
listYearPacific <- as.numeric(unique(df$Year))
listMonthPacific <- as.character(unique(df$Month))
listDayPacific <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNamePacific <- as.character(unique(df$Name))
#Creating data frames for line graphs
#Need days of year
#Max wind speed on that day
#Minimum Pressure on that day
days <- seq(as.Date("2019/1/1"), as.Date("2019/12/31"), "days")
days <- strftime(days, format = "%j")
days <- as.data.frame(days,stringsAsFactors = FALSE)
df$"Days of Year" <- strftime(df$OldDate, format = "%j")
MaxWindDF <- subset(df, select = c("Max Wind","Days of Year"))
MinPresDF <- subset(df, select = c("Min Pressure","Days of Year"))
MinPresDF$`Min Pressure`[MinPresDF$`Min Pressure` == -999] <- NA
MaxWindDF$`Max Wind`[MaxWindDF$`Max Wind` == -99] <- NA
MinPresDF <- na.omit(MinPresDF)
MaxWindDF <- na.omit(MaxWindDF)
#Ordering frames
MaxWindDF <- MaxWindDF[order(MaxWindDF$`Days of Year`,-MaxWindDF$`Max Wind`),]
MinPresDF <- MinPresDF[order(MinPresDF$`Days of Year`,MinPresDF$`Min Pressure`),]
for(i in 1:length(days$days)){
days$"Max Wind"[i] <- max(MaxWindDF[MaxWindDF$`Days of Year` == days$days[i],1])
days$"Min Pressure"[i] <- min(MinPresDF[MinPresDF$`Days of Year` == days$days[i],1])
}
days$`Max Wind`[days$`Max Wind` == Inf] <- NA
days$`Max Wind`[days$`Max Wind` == -Inf] <- NA
days$`Min Pressure`[days$`Min Pressure` == Inf] <- NA
days$`Min Pressure`[days$`Min Pressure` == -Inf] <- NA
max = c()
for(i in 1:length(listNamePacific)){
max[i] = 0;
for(j in 1:length(df$Name)){
if(listNamePacific[i] == df$Name[j]){
if(df$`Max Wind`[j] >= max[i]){
max[i] = df$`Max Wind`[j]
}
}
}
}
#Above loop makes max vector associated with list of names
#from there check list for top ten
topTenPacific = data.frame("HU" = listNamePacific, "MAX" = max, stringsAsFactors = FALSE)
topTenPacific <- topTenPacific[order(-topTenPacific$MAX),]
topTenPacific <- topTenPacific[1:10,]
topTenList = topTenPacific[1:10,1]
View(topTenPacific)
pacificDaysOfYearDF <- days
dfPacific <- subset(df, select = c("Name","Date","Min Pressure","Max Wind","Hurricane Category","Basin","ATCF","Hour","Minute","Latitude","Longitude","Month","Day","Year","Days of Year"))
dfPacific10 <- dfPacific[dfPacific$Name %in% topTenList,]
View(dfPacific10)
View(topTenPacific)
#Above loop makes max vector associated with list of names
#from there check list for top ten
topTenPacific = data.frame("HU" = listNamePacific, "MAX" = max, stringsAsFactors = FALSE)
topTenPacific <- topTenPacific[order(-topTenPacific$MAX),]
topTenPacific <- topTenPacific[1:10,]
topTenListPacific = topTenPacific[1:10,1]
pacificDaysOfYearDF <- days
dfPacific <- subset(df, select = c("Name","Date","Min Pressure","Max Wind","Hurricane Category","Basin","ATCF","Hour","Minute","Latitude","Longitude","Month","Day","Year","Days of Year"))
dfPacific10 <- dfPacific[dfPacific$Name %in% topTenListPacific,]
save(pacificDaysOfYearDF,dfPacific, listYearPacific, listNamePacific,
listMonthPacific, listDayPacific,topTenListPacific,topTenPacific,dfPacific10, file = "pacific_new.RData")
#new processing of atlantic data
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(dplyr)
# ============= ATLANTIC DATA =============
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"),row.names = NULL)
df$X23 <- NULL
names(df)[1] <- "Number of Entries"
names(df)[2] <- "Name"
names(df)[3] <- "Basin/ATCF/Year"
names(df)[4] <- "Date"
names(df)[5] <- "Time"
names(df)[6] <- "Record Identifier"
names(df)[7] <- "Status of System"
names(df)[8] <- "Latitude/Hemisphere"
names(df)[9] <- "Longitude/Hemisphere"
names(df)[10] <- "Max Wind" #in knots
names(df)[11] <- "Min Pressure" #in millibars
names(df)[12] <- "34kt Wind Radii in NE Qaudrant"
names(df)[13] <- "34kt Wind Radii in SE Qaudrant"
names(df)[14] <- "34kt Wind Radii in SW Qaudrant"
names(df)[15] <- "34kt Wind Radii in NW Qaudrant"
names(df)[16] <- "50kt Wind Radii in NE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SE Qaudrant"
names(df)[18] <- "50kt Wind Radii in SW Qaudrant"
names(df)[19] <- "50kt Wind Radii in NW Qaudrant"
names(df)[20] <- "64kt Wind Radii in NE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SE Qaudrant"
names(df)[22] <- "64kt Wind Radii in SW Qaudrant"
names(df)[23] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
df$Date <- as.Date(as.character(df$Date), "%Y %m %d") # makes date in to 1851-06-25
df$OldDate <- df$Date
df$Date <- format(as.Date(df$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
df$Basin <- as.character(substr(df$`Basin/ATCF/Year`, 1, 2))
df$ATCF <- as.numeric(substr(df$`Basin/ATCF/Year`, 3, 4))
df$Year <- as.numeric(substr(df$`Basin/ATCF/Year`, 5, 8))
df$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
df$Time <- str_pad(df$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
df$Hour <- as.numeric(substr(df$Time, 1, 2)) # hour
df$Minute <- as.numeric(substr(df$Time, 3, 4)) # minute
df$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
df$Latitude <- as.numeric(substr(df$`Latitude/Hemisphere`, 1, 5)) # decimal
df$HemiNS <- as.character(substr(df$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
df$Longitude <- as.numeric(substr(df$`Longitude/Hemisphere`, 1, 6)) # decimal
df$HemiEW <- as.character(substr(df$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
df$`Latitude/Hemisphere` <- NULL
df$`Longitude/Hemisphere` <- NULL
for (i in 1:length(df$HemiEW)) {
if(df$HemiEW[i] == "W")
df$Longitude[i] = df$Longitude[i]*-1
if(df$HemiNS[i] == "S")
df$Latitude[i] = df$Latitude[i]*-1
}
# ============= unique dates =============
dates <- data.frame(str_split_fixed(df$Date, " ", 3))
df$Month <- as.character(dates$X1)
df$Day <- as.numeric(dates$X2)
dates <- NULL
# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
#======== Naming Unnames Hurricanes ======
#got through the entire list of hurricanes
df$`Number of Entries` <- as.numeric(as.character(df$`Number of Entries`))
count = 1
finish = df$`Number of Entries`[1]
for(i in 1:length(df$`Number of Entries`)){
if(i <= finish){
if(df$Name[i] == 'UNNAMED'){
df$NewName[i] <- paste('HU Atlantic ',count)
}
else{
df$NewName[i] <- df$Name[i]
}
}
if(i == finish){
if(df$NewName[i] == paste('HU Atlantic ', count)){
count = count + 1
}
finish = finish + df$`Number of Entries`[i+1]
}
}
df$Name <- df$NewName
df$NewName <- NULL
#==== Categorizing hurricanes based on max wind speed ======
df$'Hurricane Category' <- cut(df$`Max Wind`, c(-99,0,38,74,96,111,130,157,400), include.lowest = T)
levels(df$'Hurricane Category') = c("UNKNOWN","TD", "TS", "C1", "C2", "C3", "C4", "C5")
df$`Hurricane Category` <- as.character(df$`Hurricane Category`)
# list of months, days, and years -- using unique
listYearAtlantic <- as.numeric(unique(df$Year))
listMonthAtlantic <- as.character(unique(df$Month))
listDayAtlantic <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNameAtlantic <- as.character(unique(df$Name))
#Creating data frames for line graphs
#Need days of year
#Max wind speed on that day
#Minimum Pressure on that day
days <- seq(as.Date("2019/1/1"), as.Date("2019/12/31"), "days")
days <- strftime(days, format = "%j")
days <- as.data.frame(days,stringsAsFactors = FALSE)
df$"Days of Year" <- strftime(df$OldDate, format = "%j")
MaxWindDF <- subset(df, select = c("Max Wind","Days of Year"))
MinPresDF <- subset(df, select = c("Min Pressure","Days of Year"))
MinPresDF$`Min Pressure`[MinPresDF$`Min Pressure` == -999] <- NA
MaxWindDF$`Max Wind`[MaxWindDF$`Max Wind` == -99] <- NA
MinPresDF <- na.omit(MinPresDF)
MaxWindDF <- na.omit(MaxWindDF)
#Ordering frames
MaxWindDF <- MaxWindDF[order(MaxWindDF$`Days of Year`,-MaxWindDF$`Max Wind`),]
MinPresDF <- MinPresDF[order(MinPresDF$`Days of Year`,MinPresDF$`Min Pressure`),]
for(i in 1:length(days$days)){
days$"Max Wind"[i] <- max(MaxWindDF[MaxWindDF$`Days of Year` == days$days[i],1])
days$"Min Pressure"[i] <- min(MinPresDF[MinPresDF$`Days of Year` == days$days[i],1])
}
days$`Max Wind`[days$`Max Wind` == Inf] <- NA
days$`Max Wind`[days$`Max Wind` == -Inf] <- NA
days$`Min Pressure`[days$`Min Pressure` == Inf] <- NA
days$`Min Pressure`[days$`Min Pressure` == -Inf] <- NA
pacificDaysOfYearDF <- days
dfPacific <- subset(df, select = c("Name","Date","Min Pressure","Max Wind","Hurricane Category","Basin","ATCF","Hour","Minute","Latitude","Longitude","Month","Day","Year","Days of Year"))
save(pacificDaysOfYearDF,dfPacific, listYearPacific, listNamePacific,
listMonthPacific, listDayPacific, file = "pacific_new.RData")
View(dfPacific)
max = c()
for(i in 1:length(listNameAtlantic)){
max[i] = 0;
for(j in 1:length(df$Name)){
if(listNameAtlantic[i] == df$Name[j]){
if(df$`Max Wind`[j] >= max[i]){
max[i] = df$`Max Wind`[j]
}
}
}
}
#Above loop makes max vector associated with list of names
#from there check list for top ten
topTenAtlantic = data.frame("HU" = listNameAtlantic, "MAX" = max, stringsAsFactors = FALSE)
topTenAtlantic <- topTenAtlantic[order(-topTenAtlantic$MAX),]
topTenAtlantic <- topTenAtlantic[1:10,]
topTenListAtlantic = topTenAtlantic[1:10,1]
atlanticDaysOfYearDF <- days
dfAtlantic <- subset(df, select = c("Name","Date","Min Pressure","Max Wind","Hurricane Category","Basin","ATCF","Hour","Minute","Latitude","Longitude","Month","Day","Year","Days of Year"))
dfAtlantic10 <- dfAtlantic[dfAtlantic$Name %in% topTenListAtlantic,]
save(atlanticDaysOfYearDF,dfAtlantic, listYearAtlantic, listNameAtlantic,
listMonthAtlantic, listDayAtlantic, dfAtlantic10, topTenAtlantic, topTenListAtlantic, file = "atlantic_new.RData")
shiny::runApp()
# loading data from preprocessed file
# that was run to save data in RData format
load("atlantic_new.RData")
load("pacific_new.RData")
runApp()
geom_line(data = atlanticDaysOfYearDF[!is.na(atlanticDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Atlantic"))+
geom_line(data = pacificDaysOfYearDF[!is.na(pacificDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Pacific"))+
scale_x_discrete(breaks=c("001","032","061","092","122","153","183","214","245","275","306","336"))+
labs(x = "Days in Year", y = "Wind Speed", title = "Maximum Wind Speed of Hurricane vs. Day in a Year") +
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 60, hjust = 1))
ggplot() +
geom_line(data = atlanticDaysOfYearDF[!is.na(atlanticDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Atlantic"))+
geom_line(data = pacificDaysOfYearDF[!is.na(pacificDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Pacific"))+
scale_x_discrete(breaks=c("001","032","061","092","122","153","183","214","245","275","306","336"))+
labs(x = "Days in Year", y = "Wind Speed", title = "Maximum Wind Speed of Hurricane vs. Day in a Year") +
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 60, hjust = 1))
ggplot() +
geom_line(data = atlanticDaysOfYearDF[!is.na(atlanticDaysOfYearDF$`Min Pressure`),],aes(x = days, y = `Min Pressure`, group = 1, color = "Atlantic"))+
geom_line(data = pacificDaysOfYearDF[!is.na(pacificDaysOfYearDF$`Min Pressure`),] ,aes(x = days, y = `Min Pressure`, group = 1, color = "Pacific"))+
scale_x_discrete(breaks=c("001","032","061","092","122","153","183","214","245","275","306","336"))+
labs(x = "Days in Year", y = "Wind Speed", title = "Minimum Pressure of Hurricane vs. Day in a Year") +
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 60, hjust = 1))
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(shiny)
library(shinydashboard)
library(dplyr)
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
# loading data from preprocessed file
# that was run to save data in RData format
load("atlantic_new.RData")
load("pacific_new.RData")
#================================ UI ===================================
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Project 2 - Against the Wind", titleWidth = 265),
sidebar <- dashboardSidebar(
width = 265,
sidebarMenu(
menuItem("Overview", tabName = "overview", icon = icon("chart-bar")),
menuItem("Map View", tabName = "map", icon = icon("map-marked-alt")),
menuItem("About", tabName = "about", icon = icon("info"))
# NEED TO FIX
# drop down boxes - Year, Name, Date (Month and Day)
#selectInput("Name", "Select Name", c("Summary", listNameAtlantic), selected = "Summary")
#selectInput("Month", "Select Month", c("Summary", listMonthAtlantic, listMonthPacific), selected = "Summary"),
#selectInput("Day", "Select Day", c("Summary", listDayAtlantic, listDayPacific), selected = "Summary"),
#selectInput("Year", "Select Year", c("Summary", listYearAtlantic, listYearPacific), selected = "Summary")
)
), # end sidebar
body <- dashboardBody(
tabItems(
# OVERVIEW TAB
tabItem(
tabName = "overview",
h2("Overview of Atlantic and Pacific Hurricane Data"),
fluidRow(
box(plotOutput("plot1",), width = 7),
box(plotOutput("plot2",), width = 5)
),
fluidRow(
box(plotOutput("plot3",), width = 7),
box(plotOutput("plot4",), width = 5)
),
),
# MAP VIEW TAB
tabItem(tabName = "map",
# LINE GRAPH 1
fluidRow(
box(title = "Atlantic Line Graph", width = 12)
),
# SINGLE MAP WITH ATLANTIC LIST/OPTIONS AND PACIFIC LIST/OPTIONS
fluidRow(
box(title = "Atlantic Map Options", width = 1,
selectInput("NameA", "Select Name", c(listNameAtlantic)),
selectInput("FilterA", "Select Filter", c("Chronologically", "Alphabetically", "Max Wind Speed", "Minimum Pressure")),
selectInput("ListA", "Select List", c("2018 Hurricanes", "Since 2005", "All Hurricanes", "Top 10", listNameAtlantic))
),
box(title = "Atlantic Hurricanes List", width = 2),
box(title = "Atlantic+Pacific Map", width = 6),
box(title = "Pacific Map Options", width = 1,
selectInput("NameP", "Select Name", c(listNamePacific)),
selectInput("FilterP", "Select Filter", c("Chronologically", "Alphabetically", "Max Wind Speed", "Minimum Pressure")),
selectInput("ListP", "Select List", c("2018 Hurricanes", "Since 2005", "All Hurricanes", "Top 10", listNamePacific))
),
box(title = "Pacific Hurricanes List", width = 2)
),
# LINE GRAPH 2
fluidRow(
box(title = "Pacific Line Graph", width = 12)
)
),
# ABOUT TAB
tabItem(
tabName = "about",
h2("Project Details"),
h3("Dashboard by Angela Timochina, Amy Ngo, and Desiree Murray for CS 424 at UIC"),
h3("Data from the Atlantic hurricane database (HURDAT2) 1851-2018 and the Northeast and North Central Pacific hurricane database (HURDAT2) 1949-2018  at http://www.nhc.noaa.gov/data/#hurdat"),
h3("Created using RStudio and Shiny with shinydashboard, ggplot2, lubridate, stringr, dplyr and leaflet libraries")
)
)
) # end dashboardBody
) # end dashboardPage
#================================ SERVER ===================================
server <- function(input, output) {
# ======== Reactive Atlantic ========
# Name of hurricanes
nameAReact <- reactive({
return (dfAtlantic[dfAtlantic$Name == input$NameA,])
})
# Filter By (Filter) - Chronologically, Alphabetically, Max Wind Speed, Minimum Pressure
filterAReact <- reactive({
#
if(FilterA == `Chronologically`){
return (dfAtlantic[sort(dfAtlantic$Date, factorsAsCharacter = TRUE)])
}
else if(FilterA == `Alphabetically`){
return (dfAtlantic[sort(dfAtlantic$Name, factorsAsCharacter = TRUE)])
}
else if(FilterA == `Max Wind Speed`){
return (dfAtlantic[sort(dfAtlantic$`Max Wind`, decreasing = FALSE)])
}
else if(FilterA == `Minimum Pressure`){
return (dfAtlantic[sort(dfAtlantic$`Min Pressure`, decreasing = FALSE)])
}
})
# List - Top Ten Overall, Since 2005, etc.
listAReact <- reactive({
if(input$ListA == "2018 Hurricanes"){
return (dfAtlantic[dfAtlantic$Year == 2018]) # hurricanges in 2018
}
else if(input$ListA == "Since 2005"){
return (dfAtlantic[dfAtlantic$Year >= 2005]) # hurricanes in 2005 and after
}
else if(input$ListA == "All Hurricanes"){
return (dfAtlantic) # all hurricanes
}
else if(intput$ListA == "Top 10"){
return (dfAtlantic10) # return top 10 specific hurricane dataframe
}
else{
return (dfAtlantic[dfAtlantic$Name == input$ListA]) #specific hurricanes
}
})
# ======== Reactive Pacific ========
# Name of hurricanes
namePReact <- reactive({
return (dfPacific[dfPacific$Name == input$NameP,])
})
# Filter By (Filter) - Chronologically, Alphabetically, Max Wind Speed, Minimum Pressure
filterPReact <- reactive({
#
if(FilterP == `Chronologically`){
return (dfPacific[sort(dfPacific$Date, factorsAsCharacter = TRUE)])
}
else if(FilterP == `Alphabetically`){
return (dfPacific[sort(dfPacific$Name, factorsAsCharacter = TRUE)])
}
else if(FilterP == `Max Wind Speed`){
return (dfAPacific[sort(dfPacific$`Max Wind`, decreasing = FALSE)])
}
else if(FilterP == `Minimum Pressure`){
return (dfPacific[sort(dfPacific$`Min Pressure`, decreasing = FALSE)])
}
})
# List - Top Ten Overall, Since 2005, etc.
listPReact <- reactive({
if(input$ListP == "2018 Hurricanes"){
return (dfPacific[dfPacific$Year == 2018]) # hurricanges in 2018
}
else if(input$ListP == "Since 2005"){
return (dfPacific[dfPacific$Year >= 2005]) # hurricanes in 2005 and after
}
else if(input$ListP == "All Hurricanes"){
return (dfPacific) # all hurricanes
}
else if(intput$ListP == "Top 10"){
return (dfPacific10) # return top 10 specific hurricane dataframe
}
else{
return (dfPacific[dfPacific$Name == input$ListP]) #specific hurricanes
}
})
# =============================================
#ATLANTIC OVERVIEW PLOTS
output$plot1 <- renderPlot({
ggplot(dfAtlantic, aes(x=Year)) + geom_bar(fill = "#617a89") +theme_ipsum() +labs(title = "Atlantic Hurricanes By Year",
subtitle = "1851-present",
y= "Number of Hurricanes", x = "Year")
})
output$plot2 <- renderPlot({
ggplot(dfAtlantic, aes(x=dfAtlantic$`Hurricane Category`)) + geom_bar(fill = "#617a89") +theme_ipsum() +labs(title = "Atlantic Hurricanes By Category",
subtitle = "1851-present",
y= "Number of Hurricanes", x = "Hurricane Category")
})
#PACIFIC OVERVIEW PLOTS
output$plot3 <- renderPlot({
ggplot(dfPacific, aes(x=Year)) + geom_bar(fill = "#617a89") +theme_ipsum() +labs(title = "Pacific Hurricanes By Year",
subtitle = "1949-present",
y= "Number of Hurricanes", x = "Year")
})
output$plot4 <- renderPlot({
ggplot(dfPacific, aes(x=dfPacific$`Hurricane Category`)) + geom_bar(fill = "#617a89") +theme_ipsum() +labs(title = "Pacific Hurricanes By Category",
subtitle = "1949-present",
y= "Number of Hurricanes", x = "Hurricane Category")
})
#LINE GRAPH PLOTS
#max wind
output$line1 <- renderPlot({
ggplot() +
geom_line(data = atlanticDaysOfYearDF[!is.na(atlanticDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Atlantic"))+
geom_line(data = pacificDaysOfYearDF[!is.na(pacificDaysOfYearDF$`Max Wind`),],aes(x = days, y = `Max Wind`, group = 1, color = "Pacific"))+
scale_x_discrete(breaks=c("001","032","061","092","122","153","183","214","245","275","306","336"))+
labs(x = "Days in Year", y = "Wind Speed", title = "Maximum Wind Speed of Hurricane vs. Day in a Year") +
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 60, hjust = 1))
})
#min pressure
output$line2 <- renderPlot({
ggplot() +
geom_line(data = atlanticDaysOfYearDF[!is.na(atlanticDaysOfYearDF$`Min Pressure`),],aes(x = days, y = `Min Pressure`, group = 1, color = "Atlantic"))+
geom_line(data = pacificDaysOfYearDF[!is.na(pacificDaysOfYearDF$`Min Pressure`),] ,aes(x = days, y = `Min Pressure`, group = 1, color = "Pacific"))+
scale_x_discrete(breaks=c("001","032","061","092","122","153","183","214","245","275","306","336"))+
labs(x = "Days in Year", y = "Wind Speed", title = "Minimum Pressure of Hurricane vs. Day in a Year") +
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 60, hjust = 1))
})
# ====== MAP ====== Needs reactive for maps
# Atlantic
output$atlantic_map <- renderLeaflet({
m <- m <- leaflet(dfAtlantic) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Voyager) %>%
addLegend("bottomright", pal = pal, values = dfAtlantic$Name, opacity = 1) %>%
addCircleMarkers(data = dfAtlantic,
lng = ~Longitude,
lat = ~Latitude,
color = ~pal(dfAtlantic$Name),
fillOpacity = 0.5,
popup = (paste(dfAtlantic$Name, "<br>",
dfAtlantic$`Max Wind`, "mph")),
radius = dfAtlantic$`Max Wind`/8)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
View(dfAtlantic)
dft1<-dfAtlantic
df2<-dfPacific
dftest3 <- rbind(dft1,df2)
View(dftest3)
dft1<-dfAtlantic[dfAtlantic$Year == "2018"]
dft1<-dfAtlantic[dfAtlantic$Year == "2018",]
df2 <- dfPacific[dfPacific$Year == "2018",]
dftest3<-rbind(dft1,df2)
View(dftest3)
shiny::runApp()
