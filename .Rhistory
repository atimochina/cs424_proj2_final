install.packages('rsconnect')
rsconnect::setAccountInfo(name='atimochina',
token='A15202E820B49CBCC6D48CDBF80D5B1B',
secret='sDrw2QgRXSL/kv2jQJU6OaaKhNPm22Pbwk+yxLkw')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('C:\Users\angyt\AppData\Local\Temp\Rtmp429Bm1\downloaded_packages')
library(rsconnect)
rsconnect::deployApp('C:\Users\angyt\Documents')
path
getwd()
library(rsconnect)
> rsconnect::deployApp('"C:/Users/angyt/Documents"')
library(rsconnect)
> rsconnect::deployApp('C:/Users/angyt/Documents')
library(rsconnect)rsconnect::deployApp('C:/Users/angyt/Documents')
library(rsconnect)
rsconnect::deployApp('C:/Users/angyt/Documents')
rsconnect::deployApp('C:/Users/angyt/Documents/ShinyApp')
clr()
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
getwd()
ls()
x<-9
ls()
list.files()
dir()
?list.files
args(list.files())
args(list.files
args(list.files)
getwd()
setwd("C:/Users/angyt/Desktop")
getwd()
setwd("C:/Users/angyt/Documents")
getwd()
dir()
setwd([7])
install.packages("lubridate")
library(lubridate)
R
shiny::runApp('CS424/Project1/TheLitterProject')
install.packages("rgeos")
install.packages("ggmap")
install.packages("maps")
install.packages(c("maps", "mapdata","maptools","ggthemes","sp","plyr"))
install.packages(c("ggplot2", "rgeos", "ggmap", "maps", "mapdata", "maptools", "ggthemes", "sp", "stringr", "plyr"))
install.packages("rlang")
install.packages("rlang")
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
setwd("CS424/Project2/")
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
View(df)
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
View(df)
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
View(df)
is.na(df[,23])
print("False")
if(is.na(df[,23]) == FALSE){
print("False")
}
for(i in length(is.na(df[,23]))){
if(is.na(df[,23])[i] == FALSE){
print("False")
}}
na.omit(df)
df <- na.omit(df)
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
df <- na.omit(df)
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
df$X23 <- NULL
View(df)
names(df)[1] <- "Name"
View(df)
names(df)[2] <- "Basin/ATCF/Year"
View(df)
names(df)[3] <- "Date"
names(df)[4] <- "Time"
names(df)[5] <- "Record Identifier"
names(df)[6] <- "Status of System"
names(df)[7] <- "Latitude/Hemisphere"
names(df)[8] <- "Longitude/Hemisphere"
names(df)[9] <- "Max Wind"
names(df)[10] <- "Min Pressure" #in millibars
names(df)[11] <- "34kt Wind Radii in NE Qaudrant"
names(df)[12] <- "34kt Wind Radii in SE Qaudrant"
names(df)[13] <- "34kt Wind Radii in SW Qaudrant"
names(df)[14] <- "34kt Wind Radii in NW Qaudrant"
names(df)[15] <- "50kt Wind Radii in NE Qaudrant"
names(df)[16] <- "50kt Wind Radii in SE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SW Qaudrant"
names(df)[18] <- "50kt Wind Radii in NW Qaudrant"
names(df)[19] <- "64kt Wind Radii in NE Qaudrant"
names(df)[20] <- "64kt Wind Radii in SE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SW Qaudrant"
names(df)[22] <- "64kt Wind Radii in NW Qaudrant"
View(df)
#libraries
library(ggplot2)
library(lubridate)
library(leaflet)
library(stringr)
library(shiny)
library(shinydashboard)
library(dplyr)
# ============= ATLANTIC DATA =============
df <- read.table("data/atlantic_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
df$X23 <- NULL
names(df)[1] <- "Name"
names(df)[2] <- "Basin/ATCF/Year"
names(df)[3] <- "Date"
names(df)[4] <- "Time"
names(df)[5] <- "Record Identifier"
names(df)[6] <- "Status of System"
names(df)[7] <- "Latitude/Hemisphere"
names(df)[8] <- "Longitude/Hemisphere"
names(df)[9] <- "Max Wind" #in knots
names(df)[10] <- "Min Pressure" #in millibars
names(df)[11] <- "34kt Wind Radii in NE Qaudrant"
names(df)[12] <- "34kt Wind Radii in SE Qaudrant"
names(df)[13] <- "34kt Wind Radii in SW Qaudrant"
names(df)[14] <- "34kt Wind Radii in NW Qaudrant"
names(df)[15] <- "50kt Wind Radii in NE Qaudrant"
names(df)[16] <- "50kt Wind Radii in SE Qaudrant"
names(df)[17] <- "50kt Wind Radii in SW Qaudrant"
names(df)[18] <- "50kt Wind Radii in NW Qaudrant"
names(df)[19] <- "64kt Wind Radii in NE Qaudrant"
names(df)[20] <- "64kt Wind Radii in SE Qaudrant"
names(df)[21] <- "64kt Wind Radii in SW Qaudrant"
names(df)[22] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
df$Date <- as.Date(as.character(df$Date), "%Y %m %d") # makes date in to 1851-06-25
df$Date <- format(as.Date(df$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
df$Basin <- as.character(substr(df$`Basin/ATCF/Year`, 1, 2))
df$ATCF <- as.numeric(substr(df$`Basin/ATCF/Year`, 3, 4))
df$Year <- as.numeric(substr(df$`Basin/ATCF/Year`, 5, 8))
df$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
df$Time <- str_pad(df$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
df$Hour <- as.numeric(substr(df$Time, 1, 2)) # hour
df$Minute <- as.numeric(substr(df$Time, 3, 4)) # minute
df$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
df$Latitude <- as.numeric(substr(df$`Latitude/Hemisphere`, 1, 5)) # decimal
df$HemiNS <- as.character(substr(df$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
df$Longitude <- as.numeric(substr(df$`Longitude/Hemisphere`, 1, 6)) # decimal
df$HemiEW <- as.character(substr(df$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
df$`Latitude/Hemisphere` <- NULL
df$`Longitude/Hemisphere` <- NULL
for (i in 1:length(df$HemiEW)) {
if(df$HemiEW[i] == "W")
df$Longitude[i] = df$Longitude[i]*-1
if(df$HemiNS[i] == "S")
df$Latitude[i] = df$Latitude[i]*-1
}
# ============= unique dates =============
dates <- data.frame(str_split_fixed(df$Date, " ", 3))
df$Month <- as.character(dates$X1)
df$Day <- as.numeric(dates$X2)
# ====== remove whitespace from Name col ======
df$Name <- gsub('\\s+', '', df$Name)
# ====== create dataframes for graphs of Atlantic overview ======
# df2 - hurricanes since 2005, complete
df2 <- subset(df, Year>='2005')
# df3 - hurricanes since 2005, unique
df3 <- select(df2, 'Name', 'Year', 'Status of System', 'Max Wind')
df3 <- df3[order(df3[,1], -df3[,4]),] #order by Name asc and Max Wind desc
df3 <- df3[!duplicated(df3$Name),] #only keep first hurricane entry which is its max (by wind speed)
# df4 - actual hurricanes since 2005, unique
df4 <- subset(df3, df3$`Max Wind`>73)
df4 <- df4[order(df4[,4]),] #order by max wind asc
df4$'Hurricane Category' <- cut(df4$`Max Wind`, c(74,96,111,130,157), include.lowest = T) #add col for Category
levels(df4$'Hurricane Category') = c("cat 1", "cat 2", "cat 3", "cat 4", "cat 5")
# df5 - hurricanes in 2018 only
df5 <- subset(df, Year=='2018')
# list of months, days, and years -- using unique
listYearAtlantic <- as.numeric(unique(df$Year))
listMonthAtlantic <- as.character(unique(df$Month))
listDayAtlantic <- sort(as.numeric(unique(df$Day)), decreasing = FALSE)
listNameAtlantic <- as.character(unique(df$Name))
# ============= PACIFIC DATA =============
dfPacific <- read.table("data/northPacific_clean.csv", header = TRUE, stringsAsFactors = FALSE, sep = c(",","[","]"))
dfPacific$X23 <- NULL
names(dfPacific)[1] <- "Name"
names(dfPacific)[2] <- "Basin/ATCF/Year"
names(dfPacific)[3] <- "Date"
names(dfPacific)[4] <- "Time"
names(dfPacific)[5] <- "Record Identifier"
names(dfPacific)[6] <- "Status of System"
names(dfPacific)[7] <- "Latitude/Hemisphere"
names(dfPacific)[8] <- "Longitude/Hemisphere"
names(dfPacific)[9] <- "Max Wind" #in knots
names(dfPacific)[10] <- "Min Pressure" #in millibars
names(dfPacific)[11] <- "34kt Wind Radii in NE Qaudrant"
names(dfPacific)[12] <- "34kt Wind Radii in SE Qaudrant"
names(dfPacific)[13] <- "34kt Wind Radii in SW Qaudrant"
names(dfPacific)[14] <- "34kt Wind Radii in NW Qaudrant"
names(dfPacific)[15] <- "50kt Wind Radii in NE Qaudrant"
names(dfPacific)[16] <- "50kt Wind Radii in SE Qaudrant"
names(dfPacific)[17] <- "50kt Wind Radii in SW Qaudrant"
names(dfPacific)[18] <- "50kt Wind Radii in NW Qaudrant"
names(dfPacific)[19] <- "64kt Wind Radii in NE Qaudrant"
names(dfPacific)[20] <- "64kt Wind Radii in SE Qaudrant"
names(dfPacific)[21] <- "64kt Wind Radii in SW Qaudrant"
names(dfPacific)[22] <- "64kt Wind Radii in NW Qaudrant"
# ====== change date format ======
# example: 18510625 -> 1851-06-25 -> Jun 25, 1851 (abbreviated)
dfPacific$Date <- as.Date(as.character(dfPacific$Date), "%Y %m %d") # makes date in to 1851-06-25
dfPacific$Date <- format(as.Date(dfPacific$Date), "%b %d %Y")
# ====== Basin, ATCF, Year ======
# separate data frames - these columns will be on the far right of the table
dfPacific$Basin <- as.character(substr(dfPacific$`Basin/ATCF/Year`, 1, 2))
dfPacific$ATCF <- as.numeric(substr(dfPacific$`Basin/ATCF/Year`, 3, 4))
dfPacific$Year <- as.numeric(substr(dfPacific$`Basin/ATCF/Year`, 5, 8))
dfPacific$`Basin/ATCF/Year` <- NULL # remove column
# ====== change time in two columns (Hr:0 - 23, Min: 0 - 59) ======
dfPacific$Time <- str_pad(dfPacific$Time, 4, pad = "0") # extra 0's padding if time is not 4 digits
dfPacific$Hour <- as.numeric(substr(dfPacific$Time, 1, 2)) # hour
dfPacific$Minute <- as.numeric(substr(dfPacific$Time, 3, 4)) # minute
dfPacific$Time <- NULL # remove column
# ====== separate Hemisphere direction from Latitude/Longtitude ======
# also change Lat and Long column type
# Lat: -90 to 90
dfPacific$Latitude <- as.numeric(substr(dfPacific$`Latitude/Hemisphere`, 1, 5)) # decimal
dfPacific$HemiNS <- as.character(substr(dfPacific$`Latitude/Hemisphere`, 6, 6)) # direction
# Long: -180 to 180
dfPacific$Longitude <- as.numeric(substr(dfPacific$`Longitude/Hemisphere`, 1, 6)) # decimal
dfPacific$HemiEW <- as.character(substr(dfPacific$`Longitude/Hemisphere`, 7, 7)) # direction
# remove columns
dfPacific$`Latitude/Hemisphere` <- NULL
dfPacific$`Longitude/Hemisphere` <- NULL
# ===== unique dates =====
dates2 <- data.frame(str_split_fixed(dfPacific$Date, " ", 3))
dfPacific$Month <- as.character(dates2$X1)
dfPacific$Day <- as.numeric(dates2$X2)
# ====== remove whitespace from Name col ======
dfPacific$Name <- gsub('\\s+', '', dfPacific$Name)
# ====== make longitudes negative ======
dfPacific$Longitude <- dfPacific$Longitude * -1
# ====== create dataframes for graphs of Atlantic overview ======
# dfPacific2 - hurricanes since 2005, complete
dfPacific2 <- subset(dfPacific, Year>='2005')
# dfPacific3 - hurricanes since 2005, unique
dfPacific3 <- select(dfPacific2, 'Name', 'Year', 'Status of System', 'Max Wind')
dfPacific3 <- dfPacific3[order(dfPacific3[,1], -dfPacific3[,4]),] #order by Name asc and Max Wind desc
dfPacific3 <- dfPacific3[!duplicated(dfPacific3$Name),] #only keep first hurricane entry which is its max (by wind speed)
# dfPacific4 - actual hurricanes since 2005, unique
dfPacific4 <- subset(dfPacific3, dfPacific3$`Max Wind`>73)
dfPacific4 <- dfPacific4[order(dfPacific4[,4]),] #order by max wind asc
dfPacific4$'Hurricane Category' <- cut(dfPacific4$`Max Wind`, c(74,96,111,130,157), include.lowest = T) #add col for Category
levels(dfPacific4$'Hurricane Category') = c("cat 1", "cat 2", "cat 3", "cat 4", "cat 5")
# dfPacific5 - hurricanes in 2018 only
dfPacific5 <- subset(dfPacific, Year=='2018')
# list of months, days, and years -- using unique
listYearPacific <- as.numeric(unique(dfPacific$Year))
listMonthPacific <- as.character(unique(dfPacific$Month))
listDayPacific <- sort(as.numeric(unique(dfPacific$Day)), decreasing = FALSE)
listNamePacific <- as.character(unique(dfPacific$Name))
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Project 2 - Against the Wind", titleWidth = 265),
sidebar <- dashboardSidebar(
width = 265,
sidebarMenu(
menuItem("Atlantic Hurricanes", tabName = "atlantic", icon = icon("tint")),
menuItem("Pacific Hurricanes", tabName = "pacific", icon = icon("tint")),
menuItem("About", tabName = "about", icon = icon("info")),
# drop down boxes - Year, Name, Date (Month and Day)
selectInput("Name", "Select Name", c("Summary", listNameAtlantic, listNamePacific), selected = "Summary"),
selectInput("Month", "Select Month", c("Summary", listMonthAtlantic, listMonthPacific), selected = "Summary"),
selectInput("Day", "Select Day", c("Summary", listDayAtlantic, listDayPacific), selected = "Summary"),
selectInput("Year", "Select Year", c("Summary", listYearAtlantic, listYearPacific), selected = "Summary")
)
), # end sidebar
body <- dashboardBody(
tabItems(
tabItem(
tabName = "atlantic",
h2("Overview of Atlantic Hurricanes Since 2005"),
fluidRow(
box(title="By Year", plotOutput("atlanticplot1",), width = 4),
box(title="By Classification", plotOutput("atlanticplot2",), width = 4),
box(title="By Hurricane Category", plotOutput("atlanticplot3",), width = 4)
),
h2("Chart of Atlantic Hurricanes"),
fluidRow(
box(tableOutput("tableAtlantic"), width = 12, height = 500)
),
h2("Map of Atlantic Hurricanes in 2018"),
fluidRow(
box(leafletOutput("map1",), width = 12, height = 500)
)
),
tabItem(tabName = "pacific",
h2("Overview of Pacific Hurricanes Since 2005"),
fluidRow(
box(title="By Year", plotOutput("pacificplot1",), width = 4),
box(title="By Classification", plotOutput("pacificplot2",), width = 4),
box(title="By Hurricane Category", plotOutput("pacificplot3",), width = 4)
),
h2("Chart of Pacific Hurricanes"),
fluidRow(
box(tableOutput("tablePacific"), width = 12, height = 500)
),
h2("Map of Pacific Hurricanes in 2018"),
fluidRow(
box(leafletOutput("map2",), width = 12, height = 500)
)
),
tabItem(
tabName = "about",
h2("Project Details"),
h3("Dashboard by Angela Timochina, Amy Ngo, and Desiree Murray for CS 424 at UIC"),
h3("Data from the Atlantic hurricane database (HURDAT2) 1851-2018 and the Northeast and North Central Pacific hurricane database (HURDAT2) 1949-2018  at http://www.nhc.noaa.gov/data/#hurdat"),
h3("Created using RStudio and Shiny with shinydashboard, ggplot2, lubridate, stringr, dplyr and leaflet libraries")
)
)
) # end dashboardBody
) # end dashboardPage
server <- function(input, output) {
# ====== Reactive function ====== Needs to be fixed! This is currently using Atlantic df
reactiveFunc <- reactive({
# all summary
if(input$Name == "Summary" & input$Month == "Summary" & input$Day == "Summary" & input$Year == "Summary")
return (df)
# specific Year
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day == "Summary" & input&Year != "Summary")
return (df[df$Year == input$Year,])
# specific Month
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day == "Summary" & input&Year == "Summary")
return (df[df$Month == input$Month,])
# specific Day
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day != "Summary" & input&Year == "Summary")
return (df[df$Day == input$Day,])
# specific Year and Day
else if (input$Name == "Summary" & input$Month == "Summary" & input$Day != "Summary" & input$Year != "Summary")
return (df[df$Year == input$Year,]) & (df[df$Day == input$Day])
# specific Year and Month
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day == "Summary" & input$Year != "Summary")
return (df[df$Year == input$Year,]) & (df[df$Month == input$Month])
# specific Month and Day
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day != "Summary" & input$Year == "Summary")
return (df[df$Month == input$Month,]) & (df[df$Day == input$Day])
# specific Month, Day and Year
else if (input$Name == "Summary" & input$Month != "Summary" & input$Day != "Summary" & input$Year != "Summary")
return (df[df$Month == input$Month,]) & (df[df$Day == input$Day]) & (df[df$Year == input$Year])
# specific name, month, day and year
else
return (df[df$Name == input$Name]) & (df[df$Month == input$Month,]) & (df[df$Day == input$Day]) & (df[df$Year == input$Year])
})
# ==================================================================
# ====== outputs for ATLANTIC OVERVIEW ======
#By Year
output$atlanticplot1 <- renderPlot({
ggplot(df3, aes(x=Year)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Year")
})
#By Classification
output$atlanticplot2 <- renderPlot({
ggplot(df3, aes(x=df3$`Status of System`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Classification")
})
#By Hurricane Category
output$atlanticplot3 <- renderPlot({
ggplot(df4, aes(x=df4$`Hurricane Category`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Category")
})
# ========== Reactive Chart ==========
#output$tableAtlantic <- renderTable(reactiveFunc())
# ==================================================================
# ====== outputs for PACIFIC OVERVIEW ======
#By Year
output$pacificplot1 <- renderPlot({
ggplot(dfPacific3, aes(x=Year)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Year")
})
#By Classification
output$pacificplot2 <- renderPlot({
ggplot(dfPacific3, aes(x=dfPacific3$`Status of System`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Classification")
})
#By Hurricane Category
output$pacificplot3 <- renderPlot({
ggplot(dfPacific4, aes(x=dfPacific4$`Hurricane Category`)) + geom_bar() +theme_light() +labs(y= "Number of Hurricanes", x = "Hurricane Category")
})
# ====== Reactive Tables ====== Needs to be fixed!
#output$tableAtlantic <- renderTable({
#
#})
#output$tablePacific <- renderTable({
#
#})
# ====== MAP ====== Needs reactive for maps
# Atlantic
output$map1 <- renderLeaflet({
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = df5, lng = ~Longitude, lat = ~Latitude)
})
# Pacific
output$map2 <- renderLeaflet({
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = dfPacific5, lng = ~Longitude, lat = ~Latitude)
})
}
shinyApp(ui = ui, server = server)
